name: Build and Deploy MongoDB

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/mobile/docker-compose.yml'
      - 'frontend/mobile/mongo-init/**'
      - 'frontend/mobile/scripts/**'
      - 'frontend/mobile/Dockerfile.mongo'
      - '.github/workflows/deploy-mongodb.yml'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push MongoDB image
      uses: docker/build-push-action@v5
      with:
        context: frontend/mobile
        file: frontend/mobile/Dockerfile.mongo
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/fridgewiseai-mongo:latest
          ghcr.io/${{ github.repository_owner }}/fridgewiseai-mongo:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Create directory if it doesn't exist
          mkdir -p ~/fridgewiseai-mongo
          cd ~/fridgewiseai-mongo
          
          # Stop existing container if running
          docker stop fridgewiseai-mongo || true
          docker stop fridgewiseai-mongo-express || true
          docker rm fridgewiseai-mongo || true
          docker rm fridgewiseai-mongo-express || true
          
          # Remove old volumes if needed (uncomment for fresh start)
          # docker volume rm fridgewiseai-mongo_mongo_data || true
          
          # Pull latest image
          docker pull ghcr.io/${{ github.repository_owner }}/fridgewiseai-mongo:latest
          
          # Create network if it doesn't exist
          docker network create fridgewiseai_network || true
          
          # Start MongoDB container
          docker run -d \
            --name fridgewiseai-mongo \
            --network fridgewiseai_network \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=fridgewiseai \
            -e MONGO_INITDB_ROOT_PASSWORD="FridgeWiseAI_2025_Secure_MongoDB_Root_P@ssw0rd!" \
            -e MONGO_INITDB_DATABASE=fridgewiseai \
            -v mongo_data:/data/db \
            --restart always \
            ghcr.io/${{ github.repository_owner }}/fridgewiseai-mongo:latest
          
          # Wait for MongoDB to be ready
          echo "Waiting for MongoDB to start..."
          sleep 30
          
          # Start Mongo Express
          docker run -d \
            --name fridgewiseai-mongo-express \
            --network fridgewiseai_network \
            -p 8081:8081 \
            -e ME_CONFIG_MONGODB_ADMINUSERNAME=fridgewiseai \
            -e ME_CONFIG_MONGODB_ADMINPASSWORD="FridgeWiseAI_2025_Secure_MongoDB_Root_P@ssw0rd!" \
            -e ME_CONFIG_MONGODB_URL="mongodb://fridgewiseai:FridgeWiseAI_2025_Secure_MongoDB_Root_P@ssw0rd!@fridgewiseai-mongo:27017/" \
            -e ME_CONFIG_BASICAUTH_USERNAME=admin \
            -e ME_CONFIG_BASICAUTH_PASSWORD="FridgeWiseAI_MongoExpress_Admin_2025!" \
            -e ME_CONFIG_MONGODB_SERVER=fridgewiseai-mongo \
            --restart always \
            mongo-express:1.0.2
          
          echo "MongoDB deployment completed!"
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          echo "=== Container Status ==="
          docker ps | grep fridgewiseai
          
          echo "=== MongoDB Health Check ==="
          docker exec fridgewiseai-mongo mongosh --eval "db.adminCommand('ping')" || echo "MongoDB connection test failed"
          
          echo "=== Recent Logs ==="
          docker logs --tail=10 fridgewiseai-mongo
          
          echo "=== Database Test ==="
          docker exec fridgewiseai-mongo mongosh fridgewiseai --eval "db.stats()" || echo "Database test failed"
        EOF

    - name: Setup automated backups
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Create backup script on server
          cat > ~/backup-mongo.sh << 'BACKUP_SCRIPT'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="fridgewiseai_backup_${DATE}"
mkdir -p ~/backups
docker exec fridgewiseai-mongo mongodump --db fridgewiseai --out /tmp/${BACKUP_NAME}
docker cp fridgewiseai-mongo:/tmp/${BACKUP_NAME} ~/backups/
tar -czf ~/backups/${BACKUP_NAME}.tar.gz -C ~/backups ${BACKUP_NAME}
rm -rf ~/backups/${BACKUP_NAME}
find ~/backups -name "fridgewiseai_backup_*.tar.gz" -mtime +7 -delete
BACKUP_SCRIPT
          chmod +x ~/backup-mongo.sh
          
          # Add to crontab if not already there
          (crontab -l 2>/dev/null | grep -v backup-mongo.sh; echo "0 2 * * * ~/backup-mongo.sh") | crontab -
          
          echo "Automated backup scheduled for 2 AM daily"
        EOF