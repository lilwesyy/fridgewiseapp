name: Deploy FridgeWise Landing Page

on:
  push:
    branches: [ main, master ]
    paths:
      - 'frontend/web/**'
      - '.github/workflows/deploy-web.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'frontend/web/**'
      - '.github/workflows/deploy-web.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fridgewiseai-landing
  CONTAINER_NAME: fridgewiseai-landing
  CONTAINER_PORT: 3000
  HOST_PORT: 3001

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/web
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove old container if exists
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          
          # Run new container with health check
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
            -e NODE_ENV=production \
            -e PORT=${{ env.CONTAINER_PORT }} \
            --health-cmd="curl -f http://localhost:${{ env.CONTAINER_PORT }}/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            --health-start-period=40s \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to be healthy
          echo "‚è≥ Waiting for container to be healthy..."
          timeout=120
          while [ $timeout -gt 0 ]; do
            if [ "$(docker inspect --format='{{.State.Health.Status}}' ${{ env.CONTAINER_NAME }} 2>/dev/null)" = "healthy" ]; then
              echo "‚úÖ Container is healthy!"
              break
            fi
            sleep 5
            timeout=$((timeout-5))
          done
          
          if [ $timeout -le 0 ]; then
            echo "‚ùå Container failed to become healthy within 2 minutes"
            docker logs ${{ env.CONTAINER_NAME }} --tail 50
            exit 1
          fi
          
          # Clean up old images (keep last 3)
          docker image prune -f
          docker images ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | head -n -3 | awk '{print $1}' | xargs -r docker rmi || true
          
          echo "‚úÖ FridgeWise Landing Page deployed successfully!"
          echo "üåê Application available at: http://$(hostname -I | awk '{print $1}'):${{ env.HOST_PORT }}"